<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Thursday, March 17, 2016, 9:09 AM -->
<!-- MuClient version 4.94 -->

<!-- Plugin "Galaban_RepopMessage" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Galaban_RepopMessage"
   author="Galaban"
   id="0683817df95d73bae2c3785c"
   language="Lua"
   purpose="Send a message when repopulation happens"
   save_state="y"
   date_written="2016-03-17 09:05:48"
   requires="4.60"
   version="1.0"
   >
<description trim="y">
<![CDATA[
This is a simple plugin that will watch for the repopulation message and then send out a Repop note when repopulation happens.  

Due to the fact that LOTJ uses a variable range for repopulation, this is only an approximation.  However, it's always within 15 seconds of this and often repopulated by the time the message appears

Also, this sends out a broadcast for other plugin designers to hook off of, in case that's your thang.
]]>
</description>

</plugin>


<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   match="Time passes as eternity continues to unfold..."
   regexp="n"
   send_to="12"
   sequence="100"
   script="repopMessage"
  >
  </trigger>

  <trigger
   enabled="y"
   match="The streets and skyways of Coruscant teem with activity."
   regexp="n"
   send_to="12"
   sequence="100"
   script="repopMessage"
  >
  </trigger>

  <trigger
   enabled="y"
   match="A calming hush falls over the area..."
   regexp="n"
   send_to="12"
   sequence="100"
   script="repopMessage"
  >
  </trigger>


  <trigger
   enabled="y"
   match="The sound of trumpets fill the air as the day passes..."
   regexp="n"
   send_to="12"
   sequence="100"
   script="repopMessage"
  >
  </trigger>


</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   match="repop"
   enabled="y"
   send_to="12"
   sequence="100"
   script="repopHelp"
  >
  </alias>

  <alias
   match="repop enable"
   enabled="y"
   send_to="12"
   sequence="100"
   script="enablePlugin"
  >
  </alias>

  <alias
   match="repop picksound"
   enabled="y"
   send_to="12"
   sequence="100"
   script="pickSoundFile"
  >
  </alias>

  <alias
   match="repop playnow"
   enabled="y"
   send_to="12"
   sequence="100"
   script="playSoundFile"
  >
  </alias>

  <alias
   match="repop sound"
   enabled="y"
   send_to="12"
   sequence="100"
   script="enableSoundFile"
  >
  </alias>

  <alias
   match="repop sound here"
   enabled="y"
   send_to="12"
   sequence="100"
   script="enablePlanetSound"  
  >
  </alias>
</aliases>

<!--  Script  -->


<script>
<![CDATA[

---------------------------------------------------------
--  Dependencies
--
SOUND_FILE_VAR = "soundFile"
SOUND_ENABLED_VAR = "soundEnabled"
SOUND_PLANETS_VAR = "soundPlanetList"
DISABLED_VAR = "pluginDisabled"

function loadluafile(filename)

    f, err = loadfile (GetPluginInfo(GetPluginID(), 20) .. filename)
    if (f == nil) then
        -- This is the error we get when we fail the plugin check.  So, copying that error here
        ColourNote("black","red","--------------------------------------------------------------------------------")
        ColourNote("black","red","Unable to load file '"..filename.."'.  Please download and install it.")
        ColourNote("black","red","It is required for the correct operation of the "..GetPluginName().." plugin.")
        ColourNote("black","red","File error:")
        ColourNote("black","red",err)
        ColourNote("black","red","--------------------------------------------------------------------------------")
        EnablePlugin("63e6909083318cf63707c044", false)
        ColourNote("red","black","Plugin disabled.")
    else
        f()
    end
end

loadluafile ("LotJMSDPPlanet.lua")


---------------------------------------------------------
--  Constants
--
local b_black = ANSI(1)..ANSI(30)
local d_black = ANSI(22)..ANSI(30)
local b_red = ANSI(1)..ANSI(31)
local d_red = ANSI(22)..ANSI(31)
local b_green = ANSI(1)..ANSI(32)
local d_green = ANSI(22)..ANSI(32)
local b_yellow = ANSI(1)..ANSI(33)
local d_yellow = ANSI(22)..ANSI(33)
local b_blue = ANSI(1)..ANSI(34)
local d_blue = ANSI(22)..ANSI(34)
local b_magenta = ANSI(1)..ANSI(35)
local d_magenta = ANSI(22)..ANSI(35)
local b_cyan = ANSI(1)..ANSI(36)
local d_cyan = ANSI(22)..ANSI(36)
local b_white = ANSI(1)..ANSI(37)
local d_white = ANSI(22)..ANSI(37)

---------------------------------------------------------
--  Globals
--
local planetSounds = {}

---------------------------------------------------------
-- Utility functions (Serialization)
--
function arrysize(tbl)
    local count = 0
    for _ in pairs(tbl) do count = count + 1 end
    return count
end
function serialize(tbl)
    local outstr = ""

    if (tbl == nil or arrysize(tbl) == 0) then 
        return ""
    end
    for i, v in pairs(tbl) do
        if(outstr ~= "") then outstr = outstr.."," end
        outstr = outstr .. i..":"..v
    end
    return outstr
end

function deserialize(instr)
    function splitItem(itemstr)
        local indx = string.find(itemstr,":")
        local name = string.sub(itemstr, 0, indx-1)
        local valu = string.sub(itemstr, indx+1)
        return name, valu
    end

    local outTbl = {}
    if (instr ~= nil and instr ~= "") then
        for itm in string.gmatch(instr, "([^,]*)") do
            if (itm ~= "") then
                local iname, ival = splitItem(itm)
                outTbl[iname] = ival
            end
        end
    end

    return outTbl
end


-- Plugin Events
--

function OnPluginInstall()

    planetSounds = deserialize(GetVariable(SOUND_PLANETS_VAR))

    -- default enabled
    if(GetVariable(DISABLED_VAR) == nil) then
        SetVariable(DISABLED_VAR,"1")
    end
end

---------------------------------------------------------
-- Sound handling
--
function playbeep()
    local filename = GetVariable(SOUND_FILE_VAR)
    Sound(filename)
end

function playSoundFile()

    local filename = GetVariable(SOUND_FILE_VAR)
    if (filename == nil or filename == "") then
        AnsiNote(b_yellow.."No sound file chosen")
        AnsiNote(b_yellow.."Use 'repop picksound' to choose one to play.")

        if (isSoundEnabledHere()) then
            if (isSoundEnabled() == false) then
                AnsiNote(b_red.."Sound is currently disabled.  Use 'repop sound' to enable it.")
            else
                AnsiNote(b_red.."Sound is currently disabled for this "..b_yellow.."planet"..b_red..".  Use 'repop sound here' to enable it.")
            end
        end

        return
    end
    AnsiNote(b_green.."Playing: "..filename)
    playbeep()

end

function isSoundEnabled()

    local isenabled = GetVariable(SOUND_ENABLED_VAR)

    if (isenabled == nil or isenabled == "0") then
        return false
    end

    return true
end

function enableSoundFile()
    local newVal = "0"
    if (isSoundEnabled() == false) then
        newVal = "1"
        SetVariable(SOUND_ENABLED_VAR,"1")
        local filename = GetVariable(SOUND_FILE_VAR)
        if (filename == nil or filename == "") then
            AnsiNote(b_yellow.."Sound enabled. But no file is chose.")
            AnsiNote(b_yellow.."Use 'repop picksound' to choose one to play.")
        else
            AnsiNote(b_green.."Sound enabled. Repops will beep.")
        end
    else
        SetVariable(SOUND_ENABLED_VAR,"0")        
        AnsiNote(b_yellow.."Sound disabled. Repops will no longer beep.")
    end

    local overrideplanets = ""
    for i, v in pairs(planetSounds) do
        if (v == newVal) then
            if (overrideplanets ~= "") then overrideplanets = overrideplanets..", " end
            overrideplanets = overrideplanets .. i
            planetSounds[i] = nil
        end
    end

    if (overrideplanets ~= "") then
        AnsiNote(b_yellow.."Planetary override removed for "..overrideplanets)
    end

end


function pickSoundFile()

    local filename = (GetVariable(SOUND_FILE_VAR) or "")

    local filepath = utils.filepicker("Choose Sound File",filename,"*.wav",{wav = ".wav"},false)
    if (filepath ~= nil) then
        AnsiNote(b_green.."Choosing file: "..filepath)
        Sound(filepath)
        -- if it's going to crash when we play it, it will crash above and we won't set the variable.
        SetVariable(SOUND_FILE_VAR, filepath)
    end

end


---------------------------------------------------------
-- Basic Configuration
--
function colorconfigval(inval)

    if (inval == "1") then
        return b_green..inval
    end
    return b_red..inval
end

function repopHelp()

    AnsiNote(b_white.."--------------------------------------------------------")
    AnsiNote(b_white.."Repop message.  Usage:")
    Note("")
    AnsiNote(b_green.."repop enable    "..b_white.." - Dis/Enable the plugin")
    Note("")

    AnsiNote(b_green.."repop sound     "..b_white.." - Dis/Enable sound file at repop")
    AnsiNote(b_green.."repop picksound "..b_white.." - Pick the sound file to play")
    AnsiNote(b_green.."repop playnow   "..b_white.." - Test the configured sound file")
    Note("")
    AnsiNote(b_green.."repop sound here"..b_white.." - Turn the sound on/off for this planet")
    Note("")
    AnsiNote(b_white.."Current configuration:")

    if (isEnabled() == false) then
        AnsiNote(b_white.."Plugin Enabled Flag: ".. colorconfigval("0").. "  - Plugin Disabled "..b_yellow.."use 'repop enable'")
    else
        AnsiNote(b_white.."Plugin Enabled Flag: ".. colorconfigval("1"))
    end

    local defval = "0"
    if (isSoundEnabled()) then defval = "1" end
    AnsiNote(b_white.."Default Sound Enabled Flag: ".. colorconfigval(defval))
    local first = true
    for i, v in pairs(planetSounds) do
        if (defval ~= v) then
            if (first) then 
                AnsiNote(b_white.."Planet overrides: ")
                first = false
            end
            AnsiNote(b_white..string.format("%-15s",i)..": ".. colorconfigval(v))
        end
    end

    AnsiNote(b_white.."--------------------------------------------------------")

end


function enablePlugin()

    if (isEnabled() == true) then
        SetVariable(DISABLED_VAR, "1")
        AnsiNote(b_yellow.."Repop plugin disabled.")
    else
        SetVariable(DISABLED_VAR, "0")
        AnsiNote(b_yellow.."Repop plugin enabled.")
    end
end

---------------------------------------------------------
-- Planet-based Configuration
--

function enablePlanetSound()

    local planet = getmsdpplanet()
    local currVal = planetSounds[planet]
    local col = b_yellow
    if (currVal == nil or currVal == "") then
        if(isSoundEnabled()) then
            currVal = "1"
        else
            currVal = "0"
        end
    end

    if (currVal ~= "1") then
        AnsiNote(col.."Sound turned "..b_green.."on"..col.." for "..planet)
        if(isSoundEnabled()) then
            planetSounds[planet] = nil
        else
            planetSounds[planet] = "1"
        end
    else
        AnsiNote(col.."Sound turned "..b_red.."off"..col.." for "..planet)
        if(isSoundEnabled()) then
            planetSounds[planet] = "0"
        else
            planetSounds[planet] = nil
        end
    end
    -- save the setting
    SetVariable(SOUND_PLANETS_VAR, serialize(planetSounds))
end

function isSoundEnabledHere()
    local value = "0"
    if (isSoundEnabled()) then 
        value = "1" 
    end

    -- planetary overrides
    local planet = getmsdpplanet()
    local planetVal = planetSounds[planet]
    if (planetVal ~= nil and planetVal ~= "") then
        value = planetVal
    end
    
    if (value == "1") then
        return true
    end
    return false
end


---------------------------------------------------------
-- Repop timer
--
function repopMessage()
    -- Note: We still want to fire off the timer so that if they enable the plugin later
    -- they will have a chance to see the message.
    DoAfterSpecial(45,"sendRepopNote()",12)
end

function isEnabled()
    local enVal = GetVariable(DISABLED_VAR)
    if (enVal == nil or enVal == "" or enVal == "0") then
        return true
    end
    return false
end

function setEnabled()
    local enVal = GetVariable(DISABLED_VAR)
    if (enVal == nil or enVal == "" or enVal == "0") then
        SetVariable(DISABLED_VAR, "1")
        AnsiNote(b_yellow.."Repop message enabled")
    else
        SetVariable(DISABLED_VAR, "0")
        AnsiNote(b_yellow.."Repop message disabled")
    end
end

function sendRepopNote()
    if (isEnabled() == false) then
        return
    end
    Note("-->Repop<--")

    --local planet = getmsdpplanet()

    if (isSoundEnabledHere()) then
       playbeep()
    end
end


]]>
</script>


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="Galaban_RepopMessage:help"
   enabled="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end
]]>
</script> 

</muclient>
